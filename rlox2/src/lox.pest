// Program
program = { declaration* ~ EOI }

// Delcarations
// A program is a series of declarations, which are the statements that bind new identifiers or any of the other statement types.
declaration = { class_decl | fun_decl | var_decl | statement }
class_decl  = {
    "class" ~ IDENTIFIER ~ ("<" ~ IDENTIFIER)? ~ "{" ~ function* ~ "}"
}
fun_decl    = { "fun" ~ function }
var_decl    = { "var" ~ IDENTIFIER ~ ("=" ~ expression)? ~ ";" }

// Statements
// The remaining statement rules produce side effects, but do not introduce bindings.
statement   = { expr_stmt | for_stmt | if_stmt | print_stmt | return_stmt | while_stmt | block }
expr_stmt   = { expression ~ ";" }
for_stmt    = {
    "for" ~ "(" ~ (var_decl | expr_stmt | ";") // initializer
  ~ expression? ~ ";" // condition
  ~ expression? ~ ")" // increment
  ~ statement // body
}
if_stmt     = {
    "if" ~ "(" ~ expression ~ ")" ~ statement ~ ("else" ~ statement)?
}
print_stmt  = { "print" ~ expression ~ ";" }
return_stmt = { "return" ~ expression? ~ ";" }
while_stmt  = { "while" ~ "(" ~ expression ~ ")" ~ statement }
block       = { "{" ~ declaration* ~ "}" }

// Expressions
expression = { assignment }
assignment = { (call ~ ".")? ~ IDENTIFIER ~ "=" ~ assignment | logic_or }
logic_or   = { logic_and ~ ("or" ~ logic_and)* }
logic_and  = { equality ~ ("and" ~ equality)* }
equality   = { comparison ~ (("!=" | "==") ~ comparison)* }
comparison = { term ~ ((">" | ">=" | "<" | "<=") ~ term)* }
term       = { factor ~ (("-" | "+") ~ factor)* }
factor     = { unary ~ (("/" | "*") ~ unary)* }
unary      = { ("!" | "-") ~ unary | call }
call       = { primary ~ ("(" ~ arguments? ~ ")" | "." ~ IDENTIFIER)* }
primary    = { TRUE | FALSE | NIL | THIS | NUMBER | STRING | grouping | super_term | IDENTIFIER }
grouping   = { "(" ~ expression ~ ")" }
super_term = { "super" ~ "." ~ IDENTIFIER }

// Utility rules
function   = { IDENTIFIER ~ "(" ~ parameters? ~ ")" ~ block }
parameters = { IDENTIFIER ~ ("," ~ IDENTIFIER)* }
arguments  = { expression ~ ("," ~ expression)* }

// keyword expressions
TRUE  = @{ "true" }
FALSE = @{ "false" }
NIL   = @{ "nil" }
THIS  = @{ "this" }

// LEXICAL GRAMMAR
NUMBER     = @{ DIGIT+ ~ ("." ~ DIGIT+)? }
STRING     = @{ "\"" ~ !"\""* ~ "\"" }
IDENTIFIER = @{ ALPHA ~ (ALPHA | DIGIT)* }
ALPHA      = @{ 'a'..'z' | 'A' .. 'Z' | "_" }
DIGIT      = @{ '0'..'9' }
